name: Build

on:
  workflow_run:
    workflows: ["Release Generator"]
    types:
      - completed  


permissions:
  packages: write      


concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event }}
  cancel-in-progress: true
jobs:

  tagext:
    runs-on: ${{ matrix.os }}

    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.8'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}  # Will change after public release
          fetch-depth: 0
      - name: Getting Tag
        id: tag_extractor
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

    outputs:
      tag: ${{ steps.tag_extractor.outputs.latest_tag }}              



  docker:
    needs: tagext
    runs-on: ubuntu-latest
    environment: Deploys
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_PAT }} # Will change after public release
        fetch-depth: 0


    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Adding required env vars for caching Docker build
      uses: actions/github-script@v7
      env:
        github-token: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env['ACTIONS_CACHE_URL'])
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env['ACTIONS_RUNTIME_TOKEN'])
          core.exportVariable('ACTIONS_RUNTIME_URL', process.env['ACTIONS_RUNTIME_URL'])

    - name: Echo required env vars
      shell: bash
      run: |
        echo "ACTIONS_CACHE_URL: $ACTIONS_CACHE_URL"
        echo "ACTIONS_RUNTIME_TOKEN: $ACTIONS_RUNTIME_TOKEN"     
        echo "ACTIONS_RUNTIME_URL: $ACTIONS_RUNTIME_URL"        

    - name: Build and Publish Docker Images
      env:
        VERSION: ${{ needs.tagext.outputs.tag }}
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        cd ..

        docker buildx build --platform linux/amd64,linux/arm64 -f On-Prem/Dockerfile --push -t ghcr.io/upsonic/on-prem:latest \
        --cache-to type=gha,mode=max \
        --cache-from type=gha .
